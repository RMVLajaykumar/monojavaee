package com.monocept.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import com.monocept.entry.Transaction;
import com.monocept.entry.Account;
import com.monocept.entry.Customer;


public class CustomerDao {
	DataSource datasource;


    private static final String VALIDATE_CUSTOMER_QUERY = "SELECT * FROM customer WHERE email_id = ? AND password = ?";
    //private static final String query = "SELECT c.customer_id, c.first_name, c.last_name, a.account_number, a.balance FROM customer c JOIN accounts a ON c.customer_id = a.customer_id";
    private static final String INSERT_CUSTOMER_QUERY = "INSERT INTO customer (first_name, last_name, email_id, password) VALUES (?, ?, ?, ?)";
    public static Customer validateCustomer(String email, String password) {
        try (Connection connection = DataBaseUtil.getConnection();
             PreparedStatement statement = connection.prepareStatement(VALIDATE_CUSTOMER_QUERY)) {

            statement.setString(1, email);
            statement.setString(2, password);
            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                int customerId = resultSet.getInt("customer_id");
                String firstName = resultSet.getString("first_name");
                String lastName = resultSet.getString("last_name");
                return new Customer(customerId, firstName, lastName, email, password);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
    
    public List<Customer> getAllCustomersWithAccounts() {
        List<Customer> customers = new ArrayList<>();
        String query = "SELECT c.customer_id, c.first_name, c.last_name, a.account_number, a.balance " +
                       "FROM customer c JOIN accounts a ON c.customer_id = a.customer_id";

        try (Connection connection = DataBaseUtil.getConnection();
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query)) {

            while (resultSet.next()) {
                int customerId = resultSet.getInt("customer_id");
                String firstName = resultSet.getString("first_name");
                String lastName = resultSet.getString("last_name");
                int accountNumber = resultSet.getInt("account_number");
                double balance = resultSet.getDouble("balance");

                Customer customer = new Customer(customerId, firstName, lastName);
                customer.addAccount(new Account(customerId, accountNumber, balance));
                customers.add(customer);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return customers;
    }

   
    


    public boolean addCustomer(Customer customer) {
        try (Connection connection = DataBaseUtil.getConnection();
             PreparedStatement statement = connection.prepareStatement(INSERT_CUSTOMER_QUERY)) {

            statement.setString(1, customer.getFirst_name());
            statement.setString(2, customer.getLast_name());
            statement.setString(3, customer.getEmail());
            statement.setString(4, customer.getPassword()); 

            int rowsInserted = statement.executeUpdate();
            return rowsInserted > 0;

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

	public List<Transaction> getTransaction() {
		
		List<Transaction> transactions=new ArrayList<Transaction>();
		try {
			Connection conn = DataBaseUtil.getConnection();
			Statement state = conn.createStatement();
			
			String query = "select * from transactions";
			ResultSet rs=state.executeQuery(query);
			
			while(rs.next()) {
				int trasactionid=rs.getInt("transaction_number");
				int senderaccountno=rs.getInt("receiver_account_number");
				int recevieraccountno=rs.getInt("sender_account_number");
				String dateOfTransaction=rs.getString("date_of_transaction");
				String transactiontype=rs.getString("transaction_type");
				double amount=rs.getDouble("transaction_amount");
				
				
				Transaction transaction=new  Transaction(trasactionid,senderaccountno,recevieraccountno,dateOfTransaction,transactiontype,amount);
				transactions.add(transaction);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return transactions;
		
		
	}
    
}
