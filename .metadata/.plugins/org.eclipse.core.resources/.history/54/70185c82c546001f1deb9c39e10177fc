package com.monocept.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import com.monocept.entry.Transaction;
import com.monocept.entry.Account;
import com.monocept.entry.Customer;




public class CustomerDao {

DataSource datasource;

    private static final String VALIDATE_CUSTOMER_QUERY = "SELECT * FROM customer WHERE email_id = ? AND password = ?";
    //private static final String query = "SELECT c.customer_id, c.first_name, c.last_name, a.account_number, a.balance FROM customer c JOIN accounts a ON c.customer_id = a.customer_id";
    private static final String INSERT_CUSTOMER_QUERY = "INSERT INTO customer (first_name, last_name, email_id, password) VALUES (?, ?, ?, ?)";
    public CustomerDao(DataSource datasource2) {
		// TODO Auto-generated constructor stub
    	this.datasource=datasource2;
	}

	public static Customer validateCustomer(String email, String password) {
        try (Connection connection = DataBaseUtil.getConnection();
             PreparedStatement statement = connection.prepareStatement(VALIDATE_CUSTOMER_QUERY)) {

            statement.setString(1, email);
            statement.setString(2, password);
            ResultSet resultSet = statement.executeQuery();

            if (resultSet.next()) {
                int customerId = resultSet.getInt("customer_id");
                String firstName = resultSet.getString("first_name");
                String lastName = resultSet.getString("last_name");
                return new Customer(customerId, firstName, lastName, email, password);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
    
    public Map<Customer,Account> getAllCustomersWithAccounts() {
    	 Map<Customer,Account> customers = new HashMap<>();
        String query = "SELECT c.customer_id, c.first_name, c.last_name, a.account_number, a.balance " +
                       "FROM customer c JOIN accounts a ON c.customer_id = a.customer_id";

        try (Connection connection = DataBaseUtil.getConnection();
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query)) {

            while (resultSet.next()) {
                int customerId = resultSet.getInt("customer_id");
                String firstName = resultSet.getString("first_name");
                String lastName = resultSet.getString("last_name");
                int accountNumber = resultSet.getInt("account_number");
                double balance = resultSet.getDouble("balance");

                Customer customer = new Customer(customerId, firstName, lastName);
                Account account=new Account(accountNumber,balance);
                customers.put(customer, account);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return customers;
    }

   
    


    public boolean addCustomer(Customer customer) {
        try (Connection connection = DataBaseUtil.getConnection();
             PreparedStatement statement = connection.prepareStatement(INSERT_CUSTOMER_QUERY)) {

            statement.setString(1, customer.getFirst_name());
            statement.setString(2, customer.getLast_name());
            statement.setString(3, customer.getEmail());
            statement.setString(4, customer.getPassword());
            int rowsInserted = statement.executeUpdate();
            
            String query1="select * from customer where first_name=? and last_name=? and email_id=? and password=?";
            PreparedStatement state=connection.prepareStatement(query1);
            state.setString(1, customer.getFirst_name());
            state.setString(2, customer.getLast_name());
            state.setString(3, customer.getEmail());
            state.setString(4, customer.getPassword());
           ResultSet rs=state.executeQuery();
           
           int customerid=0;
           while(rs.next()) {
        	    customerid=rs.getInt("customer_id");
           }
           String insertQuery="insert into accounts(customer_id) values(?)";
   		  PreparedStatement preparedStatement1 = connection.prepareStatement(insertQuery);
   		  preparedStatement1.setInt(1, customerid);
   		  int executeUpdate2 = preparedStatement1.executeUpdate();
           
           
           
            return rowsInserted > 0;

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public List<Transaction> getTransactions() throws SQLException {
		List<Transaction> transactions=new ArrayList<Transaction>();
		Connection connection = DataBaseUtil.getConnection();
		String selectQuery="select * from transactions";
		Statement createStatement = connection.createStatement();
		ResultSet executeQuery = createStatement.executeQuery(selectQuery);
		while(executeQuery.next()) {
			int sender=executeQuery.getInt("sender_account_number");
			int receiver=executeQuery.getInt("receiver_account_number");
			String date=executeQuery.getString("date_of_transaction");
			String type=executeQuery.getString("transaction_type");
			double amount=executeQuery.getDouble("transaction_amount");
			Transaction transaction=new Transaction(sender, receiver, date, type, amount);
			transactions.add(transaction);
			
		}
		return transactions;
	}

    public Map<Customer, Account> searchCustomersWithAccounts(int customerId) {
        Map<Customer, Account> customers = new HashMap<>();

        try {
            Connection conn = DataBaseUtil.getConnection();
            String query = "SELECT c.customer_id, c.first_name, c.last_name, a.account_number, a.balance FROM customer c JOIN accounts a ON c.customer_id = a.customer_id WHERE c.customer_id = ?";
            PreparedStatement state = conn.prepareStatement(query);

            state.setInt(1, customerId);
            ResultSet rs = state.executeQuery();

            while (rs.next()) {
                int id = rs.getInt("customer_id");
                String firstName = rs.getString("first_name");
                String lastName = rs.getString("last_name");
                int accountNumber = rs.getInt("account_number");
                double balance = rs.getDouble("balance");

                Customer customer1 = new Customer(id, firstName, lastName);
                Account account1 = new Account(accountNumber, balance);
                customers.put(customer1, account1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return customers;
    }

	public List<Transaction> SearchTransaction(int senderId, int receiverId) {
		
		List<Transaction> transactions=new ArrayList<Transaction>();
		try {
		Connection connection = DataBaseUtil.getConnection();
		String selectQuery="select * from transactions where sender_account_number=? and receiver_account_number=?";
		PreparedStatement state = connection.prepareStatement(selectQuery);
		state.setInt(1,senderId);
		state.setInt(2,receiverId);
		ResultSet executeQuery = state.executeQuery();
		while(executeQuery.next()) {
			int sender=executeQuery.getInt("sender_account_number");
			int receiver=executeQuery.getInt("receiver_account_number");
			String date=executeQuery.getString("date_of_transaction");
			String type=executeQuery.getString("transaction_type");
			double amount=executeQuery.getDouble("transaction_amount");
			Transaction transaction=new Transaction(sender, receiver, date, type, amount);
			transactions.add(transaction);
		}
		}
		  catch (SQLException e) {
		      e.printStackTrace();
		  }
		return transactions;
	}

	public List<Transaction> getPassbook(String email) throws SQLException {
	    List<Transaction> transactions = new ArrayList<>();
	    Connection connection = null;
	    PreparedStatement preparedStatement = null;
	    ResultSet resultSet = null;

	    try {
	        connection = datasource.getConnection();
	        String query = "select * from accounts a join customers c on c.customer_id=a.customer_id join transactions t on t.sender_account_number=a.account_number or t.receiver_account_number=a.account_number where c.email_id=?";

	        preparedStatement = connection.prepareStatement(query);
	        preparedStatement.setString(1, email);

	        resultSet = preparedStatement.executeQuery();

	        while (resultSet.next()) {
	            int transactionNumber = resultSet.getInt("transaction_number");
	            int senderAccountNumber = resultSet.getInt("sender_account_number");
	            int receiverAccountNumber = resultSet.getInt("receiver_account_number");
	            String transactionType = resultSet.getString("transaction_type");
	            double transactionAmount = resultSet.getDouble("transaction_amount");
	            String dateOfTransaction = resultSet.getString("date_of_transaction");

	            Transaction transaction = new Transaction(transactionNumber, senderAccountNumber, receiverAccountNumber, dateOfTransaction, transactionType, transactionAmount);
	            transactions.add(transaction);
	        }
	    } finally {
	        if (resultSet != null) {
	            resultSet.close();
	        }
	        if (preparedStatement != null) {
	            preparedStatement.close();
	        }
	        if (connection != null) {
	            connection.close();
	        }
	    }

	    return transactions;
	}

	public CustomerDao() {
		super();
	}
  

		
		
	}


	

	


	
		
		
	    

